services:
  mongodb:
    image: mongo:7.0
    container_name: healthcare_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: healthcare
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      start_period: 20s
      retries: 20
    networks:
      - healthcare_network

  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: healthcare_ipfs
    restart: unless-stopped
    ports:
      - "5001:5001"
      - "8080:8080"
    environment:
      - IPFS_TELEMETRY=off
    volumes:
      - ipfs_data:/data/ipfs
    healthcheck:
      test: ["CMD-SHELL", "ipfs --api=/ip4/127.0.0.1/tcp/5001 id > /dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 5s
      start_period: 120s
      retries: 20
    networks:
      - healthcare_network

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: healthcare_backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file: .env
    depends_on:
      mongodb:
        condition: service_healthy
      ipfs:
        condition: service_healthy
    volumes:
      - ./scripts/wait-for-services.sh:/app/wait-for-services.sh:ro
      - ./cert.pem:/app/cert.pem:ro
      - ./key.pem:/app/key.pem:ro
    command: ["/bin/sh", "-c", "/app/wait-for-services.sh mongodb ipfs /usr/local/bin/app"]
    networks:
      - healthcare_network

volumes:
  mongodb_data: {}
  ipfs_data: {}

networks:
  healthcare_network:
    driver: bridge
